// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `task.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:task.CreateTaskRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateTaskRequest {
    // message fields
    // @@protoc_insertion_point(field:task.CreateTaskRequest.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:task.CreateTaskRequest.bundle)
    pub bundle: ::std::string::String,
    // @@protoc_insertion_point(field:task.CreateTaskRequest.terminal)
    pub terminal: bool,
    // @@protoc_insertion_point(field:task.CreateTaskRequest.stdin)
    pub stdin: ::std::string::String,
    // @@protoc_insertion_point(field:task.CreateTaskRequest.stdout)
    pub stdout: ::std::string::String,
    // @@protoc_insertion_point(field:task.CreateTaskRequest.stderr)
    pub stderr: ::std::string::String,
    // @@protoc_insertion_point(field:task.CreateTaskRequest.checkpoint)
    pub checkpoint: ::std::string::String,
    // @@protoc_insertion_point(field:task.CreateTaskRequest.parent_checkpoint)
    pub parent_checkpoint: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:task.CreateTaskRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateTaskRequest {
    fn default() -> &'a CreateTaskRequest {
        <CreateTaskRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateTaskRequest {
    pub fn new() -> CreateTaskRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &CreateTaskRequest| { &m.id },
            |m: &mut CreateTaskRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bundle",
            |m: &CreateTaskRequest| { &m.bundle },
            |m: &mut CreateTaskRequest| { &mut m.bundle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "terminal",
            |m: &CreateTaskRequest| { &m.terminal },
            |m: &mut CreateTaskRequest| { &mut m.terminal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stdin",
            |m: &CreateTaskRequest| { &m.stdin },
            |m: &mut CreateTaskRequest| { &mut m.stdin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stdout",
            |m: &CreateTaskRequest| { &m.stdout },
            |m: &mut CreateTaskRequest| { &mut m.stdout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stderr",
            |m: &CreateTaskRequest| { &m.stderr },
            |m: &mut CreateTaskRequest| { &mut m.stderr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "checkpoint",
            |m: &CreateTaskRequest| { &m.checkpoint },
            |m: &mut CreateTaskRequest| { &mut m.checkpoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent_checkpoint",
            |m: &CreateTaskRequest| { &m.parent_checkpoint },
            |m: &mut CreateTaskRequest| { &mut m.parent_checkpoint },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateTaskRequest>(
            "CreateTaskRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateTaskRequest {
    const NAME: &'static str = "CreateTaskRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.bundle = is.read_string()?;
                },
                32 => {
                    self.terminal = is.read_bool()?;
                },
                42 => {
                    self.stdin = is.read_string()?;
                },
                50 => {
                    self.stdout = is.read_string()?;
                },
                58 => {
                    self.stderr = is.read_string()?;
                },
                66 => {
                    self.checkpoint = is.read_string()?;
                },
                74 => {
                    self.parent_checkpoint = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.bundle.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bundle);
        }
        if self.terminal != false {
            my_size += 1 + 1;
        }
        if !self.stdin.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.stdin);
        }
        if !self.stdout.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.stdout);
        }
        if !self.stderr.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.stderr);
        }
        if !self.checkpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.checkpoint);
        }
        if !self.parent_checkpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.parent_checkpoint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.bundle.is_empty() {
            os.write_string(2, &self.bundle)?;
        }
        if self.terminal != false {
            os.write_bool(4, self.terminal)?;
        }
        if !self.stdin.is_empty() {
            os.write_string(5, &self.stdin)?;
        }
        if !self.stdout.is_empty() {
            os.write_string(6, &self.stdout)?;
        }
        if !self.stderr.is_empty() {
            os.write_string(7, &self.stderr)?;
        }
        if !self.checkpoint.is_empty() {
            os.write_string(8, &self.checkpoint)?;
        }
        if !self.parent_checkpoint.is_empty() {
            os.write_string(9, &self.parent_checkpoint)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateTaskRequest {
        CreateTaskRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.bundle.clear();
        self.terminal = false;
        self.stdin.clear();
        self.stdout.clear();
        self.stderr.clear();
        self.checkpoint.clear();
        self.parent_checkpoint.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateTaskRequest {
        static instance: CreateTaskRequest = CreateTaskRequest {
            id: ::std::string::String::new(),
            bundle: ::std::string::String::new(),
            terminal: false,
            stdin: ::std::string::String::new(),
            stdout: ::std::string::String::new(),
            stderr: ::std::string::String::new(),
            checkpoint: ::std::string::String::new(),
            parent_checkpoint: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateTaskRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateTaskRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateTaskRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateTaskRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:task.CreateTaskResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateTaskResponse {
    // message fields
    // @@protoc_insertion_point(field:task.CreateTaskResponse.pid)
    pub pid: u32,
    // special fields
    // @@protoc_insertion_point(special_field:task.CreateTaskResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateTaskResponse {
    fn default() -> &'a CreateTaskResponse {
        <CreateTaskResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateTaskResponse {
    pub fn new() -> CreateTaskResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &CreateTaskResponse| { &m.pid },
            |m: &mut CreateTaskResponse| { &mut m.pid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateTaskResponse>(
            "CreateTaskResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateTaskResponse {
    const NAME: &'static str = "CreateTaskResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pid = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.pid != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.pid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.pid != 0 {
            os.write_uint32(1, self.pid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateTaskResponse {
        CreateTaskResponse::new()
    }

    fn clear(&mut self) {
        self.pid = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateTaskResponse {
        static instance: CreateTaskResponse = CreateTaskResponse {
            pid: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateTaskResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateTaskResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateTaskResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateTaskResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ntask.proto\x12\x04task\"\xea\x01\n\x11CreateTaskRequest\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\x12\x16\n\x06bundle\x18\x02\x20\x01(\tR\
    \x06bundle\x12\x1a\n\x08terminal\x18\x04\x20\x01(\x08R\x08terminal\x12\
    \x14\n\x05stdin\x18\x05\x20\x01(\tR\x05stdin\x12\x16\n\x06stdout\x18\x06\
    \x20\x01(\tR\x06stdout\x12\x16\n\x06stderr\x18\x07\x20\x01(\tR\x06stderr\
    \x12\x1e\n\ncheckpoint\x18\x08\x20\x01(\tR\ncheckpoint\x12+\n\x11parent_\
    checkpoint\x18\t\x20\x01(\tR\x10parentCheckpoint\"&\n\x12CreateTaskRespo\
    nse\x12\x10\n\x03pid\x18\x01\x20\x01(\rR\x03pid2C\n\x04Task\x12;\n\x06Cr\
    eate\x12\x17.task.CreateTaskRequest\x1a\x18.task.CreateTaskResponseJ\x8a\
    \x05\n\x06\x12\x04\0\0\x15\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\r\n\n\n\x02\x06\0\x12\x04\x04\0\x06\x01\n\n\n\x03\
    \x06\0\x01\x12\x03\x04\x08\x0c\n\x0b\n\x04\x06\0\x02\0\x12\x03\x05\x08C\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x05\x0c\x12\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x05\x13$\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x05/A\n\n\n\
    \x02\x04\0\x12\x04\x08\0\x11\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x19\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\t\x08\x16\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\t\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\x0f\x11\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\t\x14\x15\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \n\x08\x1a\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\n\x08\x0e\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\n\x0f\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\n\x18\x19\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0b\x08\x1a\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03\x0b\x08\x0c\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\x0b\r\x15\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b\x18\x19\n\x0b\n\
    \x04\x04\0\x02\x03\x12\x03\x0c\x08\x19\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x03\x0c\x08\x0e\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0c\x0f\x14\n\x0c\
    \n\x05\x04\0\x02\x03\x03\x12\x03\x0c\x17\x18\n\x0b\n\x04\x04\0\x02\x04\
    \x12\x03\r\x08\x1a\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\r\x08\x0e\n\x0c\
    \n\x05\x04\0\x02\x04\x01\x12\x03\r\x0f\x15\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03\r\x18\x19\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x0e\x08\x1a\n\x0c\n\
    \x05\x04\0\x02\x05\x05\x12\x03\x0e\x08\x0e\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03\x0e\x0f\x15\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x0e\x18\x19\n\
    \x0b\n\x04\x04\0\x02\x06\x12\x03\x0f\x08\x1e\n\x0c\n\x05\x04\0\x02\x06\
    \x05\x12\x03\x0f\x08\x0e\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x0f\x0f\
    \x19\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x0f\x1c\x1d\n\x0b\n\x04\x04\0\
    \x02\x07\x12\x03\x10\x08%\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x10\x08\
    \x0e\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x10\x0f\x20\n\x0c\n\x05\x04\0\
    \x02\x07\x03\x12\x03\x10#$\n\n\n\x02\x04\x01\x12\x04\x13\0\x15\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x13\x08\x1a\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x14\x08\x17\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x14\x08\x0e\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x14\x0f\x12\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x14\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(CreateTaskRequest::generated_message_descriptor_data());
            messages.push(CreateTaskResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
